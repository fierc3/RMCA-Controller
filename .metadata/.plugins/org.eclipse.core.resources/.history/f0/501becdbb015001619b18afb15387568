package ch.robot.controller;

import java.rmi.RemoteException;

import lejos.remote.ev3.RMIRegulatedMotor;
import lejos.remote.ev3.RemoteEV3;

public class RobotController{
	
	RMIRegulatedMotor mRight;
	RMIRegulatedMotor mLeft;
    RMISampleProvider lightProvider;
	RemoteEV3 remEv;
	int speed=500;
	
	public boolean connect(String ipAddress){
		try{
			 remEv = new RemoteEV3(ipAddress);
		}catch(Exception ex){
			return false;
		}
		return true;
		
	}
	
	public boolean connectPorts(){
		try{
			mRight = remEv.createRegulatedMotor("A", 'L');
			mLeft = remEv.createRegulatedMotor("D", 'L');
		}catch(Exception ex){
			return false;
		}
		return true;
		
	}
	
	public void disconnectPorts() throws RemoteException {
		if(mRight != null){
			mRight.close();
		}
		if(mLeft != null){
			mLeft.close();
		}
		
	}
	
	public void turnLeft() throws RemoteException{
		mLeft.setSpeed(speed);
		mLeft.stop(false);
		mLeft.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
	}
	
	public void startTurnLeft() throws RemoteException{
		mLeft.setSpeed(speed);
		mLeft.stop(false);
		mLeft.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
	}
	
	public void turnRight() throws RemoteException{
		mRight.setSpeed(speed);
		mRight.stop(false);
		mRight.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mRight.stop(true);
	}
	
	
	public void startTurnRight() throws RemoteException{
		mRight.setSpeed(speed);
		mRight.stop(false);
		mRight.forward();
	}
	
	public void forward() throws RemoteException{
		mLeft.setSpeed(speed);
		mRight.setSpeed(speed);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.forward();
		mRight.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
		mRight.stop(true);
	}
	
	public void startForward() throws RemoteException{
		mLeft.setSpeed(speed);
		mRight.setSpeed(speed);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.forward();
		mRight.forward();
	}
	
	public void stopMovementMotors() throws RemoteException{
		mLeft.stop(true);
		mRight.stop(true);
	}
	
	public void backward() throws RemoteException{
		mLeft.setSpeed(speed);
		mRight.setSpeed(speed);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.backward();
		mRight.backward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
		mRight.stop(true);
	}
	
	public void startBackward() throws RemoteException{
		mLeft.setSpeed(speed);
		mRight.setSpeed(speed);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.backward();
		mRight.backward();
	}
	
    public boolean isTooDark() throws RobotSamplingException{
        try {
            float[] sample = lightProvider.fetchSample();
            double darkness = sample[0];
            if(darkness < 1){
                return true;
            }
        } catch (RemoteException ex) {
            throw new RobotSamplingException(ex.getMessage());
        }
        return false;
    }

}
