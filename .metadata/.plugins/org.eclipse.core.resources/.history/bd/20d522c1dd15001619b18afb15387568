package ch.robot.controller;

import java.io.IOException;
import java.rmi.RemoteException;

import ch.robot.controller.exception.RobotSamplingException;
import lejos.remote.ev3.RMIRegulatedMotor;
import lejos.remote.ev3.RMISampleProvider;
import lejos.remote.ev3.RemoteEV3;

public class RobotController{
	
	RMIRegulatedMotor mRight;
	RMIRegulatedMotor mLeft;
    RMISampleProvider lightProvider;
	RemoteEV3 remEv;
	final int MOVEMENTSPEED=500;
	final int MINIMUMBRIGHTNESS=1;

	
	public boolean connect(String ipAddress){
		try{
			 remEv = new RemoteEV3(ipAddress);
		}catch(Exception ex){
			return false;
		}
		return true;
		
	}
	
	public boolean connectPorts(){
		try{
			mRight = remEv.createRegulatedMotor("A", 'L');
			mLeft = remEv.createRegulatedMotor("D", 'L');
            lightProvider = remEv.createSampleProvider("S2", "lejos.hardware.EV3LightSensor", "ambient");
		}catch(Exception ex){
			return false;
		}
		return true;
		
	}
	
	public void disconnectPorts() throws IOException {
		try{
		if(mRight != null){
			mRight.close();
		}
		if(mLeft != null){
			mLeft.close();
		}
		if(lightProvider !=null){
			lightProvider.close();
		}
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
		
	}
	
	public void turnLeft(){
		mLeft.setSpeed(MOVEMENTSPEED);
		mLeft.stop(false);
		mLeft.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
	}
	
	public void startTurnLeft(){
		mLeft.setSpeed(MOVEMENTSPEED);
		mLeft.stop(false);
		mLeft.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
	}
	
	public void turnRight(){
		try{
		mRight.setSpeed(MOVEMENTSPEED);
		mRight.stop(false);
		mRight.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mRight.stop(true);
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
	
	public void startTurnRight() throws IOException{
		try{
		mRight.setSpeed(MOVEMENTSPEED);
		mRight.stop(false);
		mRight.forward();
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
	public void forward() throws IOException{
		try{
		mLeft.setSpeed(MOVEMENTSPEED);
		mRight.setSpeed(MOVEMENTSPEED);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.forward();
		mRight.forward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
		mRight.stop(true);
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
	public void startForward() throws IOException{
		try{
		mLeft.setSpeed(MOVEMENTSPEED);
		mRight.setSpeed(MOVEMENTSPEED);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.forward();
		mRight.forward();
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
	public void stopMovementMotors() throws IOException{
		try{
		mLeft.stop(true);
		mRight.stop(true);
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
	public void backward() throws IOException{
		try{
		mLeft.setSpeed(MOVEMENTSPEED);
		mRight.setSpeed(MOVEMENTSPEED);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.backward();
		mRight.backward();
		try{
		Thread.sleep(666);
		}catch(Exception ex){
			System.out.println(ex);
		}
		mLeft.stop(true);
		mRight.stop(true);
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
	public void startBackward() throws IOException{
		try{
		mLeft.setSpeed(MOVEMENTSPEED);
		mRight.setSpeed(MOVEMENTSPEED);
		mRight.stop(false);
		mLeft.stop(false);
		mLeft.backward();
		mRight.backward();
		}catch(Exception ex){
			throw new IOException(ex.getMessage());
		}
	}
	
    public boolean isTooDark() throws RobotSamplingException{
        try {
            float[] sample = lightProvider.fetchSample();
            double darkness = sample[0];
            if(darkness < 1){
                return true;
            }
        } catch (Exception ex) {
            throw new RobotSamplingException(ex.getMessage());
        }
        return false;
    }

}
